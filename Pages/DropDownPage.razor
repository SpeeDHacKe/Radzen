@page "/dropdown"

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind

@inject NorthwindContext dbContext
<style>
</style>

<RadzenExample Name="DropDown">
<div class="row">
    <div class="col-xl-6">
        <h3>DropDown</h3>
        <RadzenDropDown AllowClear="true" TValue="string"
                        Data=@(customers.Select(c => new { CustomerID = c.CustomerID, CompanyName = c.CompanyName }).Distinct())
                        TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown")) />
        <h3 style="margin-top: 2rem">DropDown with custom filter operator</h3>
        <RadzenDropDown AllowClear="true" TValue="string"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown with custom filter operator")) />
        <h3 style="margin-top: 2rem">DropDown with custom filtering</h3>
        <RadzenDropDown AllowClear="true" TValue="string"
                        LoadData=@LoadData AllowFiltering="true"
                        Data=@customCustomersData TextProperty="CompanyName" ValueProperty="CustomerID"
                        Change=@(args => OnChange(args, "DropDown with custom filtering")) />
        <h3 style="margin-top: 2rem">DropDown with placeholder</h3>
        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" 
            Placeholder="Select..." Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown with placeholder")) />
        <h3 style="margin-top: 2rem">DropDown with template</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@value Placeholder="Select..."
            Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown with placeholder")) Style="width:400px">
            <Template>
                Company: @((context as Customer).CompanyName)
            </Template>
        </RadzenDropDown>
        <h3 style="margin-top: 2rem">DropDown with multiple selection</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            @bind-Value=@multipleValues Multiple="true" Placeholder="Select..." Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID"
                Change=@(args => OnChange(args, "DropDown with multiple selection")) Style="width:400px" />
        <h3 style="margin-top: 2rem">Bind DropDown Value to model property</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@products @bind-Value=@myModel.MyValue
                        TextProperty="ProductName" ValueProperty="ProductID" Style="width:400px" Change=@(args => ChangeBound(args, "DropDown with bound Value")) />
    </div>
    <div class="col-xl-6">
        <EventConsole @ref=@console />
    </div>
</div>
</RadzenExample>

@code {
    IEnumerable<Customer> customers;
    IEnumerable<Customer> customCustomersData;
    IEnumerable<Product> products;
    MyObject myModel = new MyObject();

    protected override void OnInitialized()
    {
        customers = dbContext.Customers.ToList();
        products = dbContext.Products.ToList();
    }

    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    string value = "ALFKI";

    EventConsole console;

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        console.Log($"{name} value changed to {str}");
    }

    void ChangeBound(object value, string name)
    {
        console.Log($"{name} value changed to {myModel.MyValue}");
    }

    class MyObject
    {
        public int? MyValue { get; set; } = 3;
    }

    void LoadData(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()));
        }

        console.Log($"LoadData with filter: {args.Filter}");

        customCustomersData = query.ToList();

        InvokeAsync(StateHasChanged);
    }
}
